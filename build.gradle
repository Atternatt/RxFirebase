// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        //constants
        kotlin_version = '1.1.3-2'
        bintrayPluginVersion = '0.5.0'
        rxJavaVersion = '2.0.2'
        firebaseVersion = '11.0.2'
        mockitoVersion = '2.7.11'
        asseertjVersion = '1.7.1'
        junitVersion = '4.12'
        espressoVersion = '2.2.2'
        kotlinTestVersion = '2.0.3'
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-alpha7'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.novoda:bintray-release:$bintrayPluginVersion"
        classpath 'com.google.gms:google-services:3.1.0'
    }
}

subprojects { project ->

    group = GROUP
    version = VERSION_NAME

    repositories {
        google()
        jcenter()
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        mavenCentral()
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion '0.7.8'
    }

    task codeCoverageReport(type: JacocoReport) {
        reports {
            xml.enabled true
            xml.destination "${buildDir}/reports/jacoco/report.xml"
            html.enabled true
            csv.enabled false
        }

        classDirectories = fileTree(
                dir: 'build/classes/main/kategory',
        )

        sourceDirectories = files('src/main/kotlin')
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    }

    apply plugin: 'com.jfrog.bintray'
    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        configurations = ['archives']
        pkg {
            repo = 'maven'
            name = ARTIFACT_ID
            userOrg = DEVELOPER_ID
        }
    }
}

task wrapper(type: Wrapper) {
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
